generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  isActive  Boolean  @default(true)
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("organizations")
}

model User {
  id                        String           @id @default(cuid())
  email                     String           @unique
  password                  String?
  firstName                 String
  lastName                  String
  phone                     String?
  phoneCarrier              String?
  organizationId            String
  role                      String           @default("MEMBER")
  accountSetupToken         String?
  accountSetupTokenExpires  DateTime?
  twoFactorSecret           String?
  twoFactorBackupCodes      Json?
  twoFactorEnabledAt        DateTime?
  twoFactorOTP              Json?
  trustedDevices            Json?
  isActive                  Boolean          @default(true)
  isEmailVerified           Boolean          @default(false)
  lastLoginAt               DateTime?
  loginAttempts             Int              @default(0)
  lockedUntil               DateTime?
  passwordResetToken        String?
  passwordResetTokenExpires DateTime?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  apiActivityLogs           ApiActivityLog[]
  apiUsage                  ApiUsage[]
  applications              Application[]    @relation("UserApplications")
  connections               Connection[]     @relation("UserConnections")
  endpoints                 Endpoint[]       @relation("UserEndpoints")
  notifications             Notification[]
  roles                     Role[]           @relation("UserRoles")
  services                  Service[]        @relation("UserServices")
  userLogs                  UserLog[]
  organization              Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workflowRuns              WorkflowRun[]    @relation("UserWorkflowRuns")
  workflows                 Workflow[]       @relation("UserWorkflows")

  @@map("users")
}

model Connection {
  id             String    @id @default(cuid())
  name           String    @unique
  host           String
  port           Int
  username       String
  password       String
  isActive       Boolean   @default(true)
  failoverHost   String?
  databases      String[]
  createdById    String
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      User      @relation("UserConnections", fields: [createdById], references: [id], onDelete: Cascade)
  services       Service[]

  @@index([createdById])
  @@index([isActive])
  @@index([createdById, isActive])
  @@map("connections")
}

model Service {
  id             String        @id @default(cuid())
  name           String        @unique
  label          String?
  description    String?
  host           String?
  port           Int?
  database       String
  username       String?
  password       String?
  isActive       Boolean       @default(true)
  failoverHost   String?
  objects        Json
  createdById    String
  organizationId String
  connectionId   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  applications   Application[]
  endpoints      Endpoint[]
  connection     Connection?   @relation(fields: [connectionId], references: [id])
  createdBy      User          @relation("UserServices", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([isActive])
  @@map("services")
}

model Application {
  id             String     @id @default(cuid())
  name           String
  description    String?
  isActive       Boolean    @default(true)
  configuration  Json?
  createdById    String
  organizationId String
  serviceId      String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      User       @relation("UserApplications", fields: [createdById], references: [id], onDelete: Cascade)
  service        Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  endpoints      Endpoint[]

  @@map("applications")
}

model Workflow {
  id                String        @id @default(cuid())
  name              String
  active            Boolean       @default(false)
  schedule          String?
  lastDatabaseCheck DateTime?
  lastHubSpotCheck  DateTime?
  nodes             Json
  edges             Json
  createdById       String
  organizationId    String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  workflowRuns      WorkflowRun[]
  createdBy         User          @relation("UserWorkflows", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowRun {
  id             String    @id @default(cuid())
  status         String
  startedAt      DateTime?
  completedAt    DateTime?
  errorMessage   String?
  executionData  Json?
  workflowId     String
  triggeredById  String
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  triggeredBy    User      @relation("UserWorkflowRuns", fields: [triggeredById], references: [id], onDelete: Cascade)
  workflow       Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_runs")
}

model Role {
  id             String   @id @default(cuid())
  name           String
  description    String?
  permissions    Json
  isActive       Boolean  @default(true)
  createdById    String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      User     @relation("UserRoles", fields: [createdById], references: [id], onDelete: Cascade)

  @@unique([name, organizationId])
  @@map("roles")
}

model Endpoint {
  id             String       @id @default(cuid())
  name           String
  path           String
  method         String
  description    String?
  isActive       Boolean      @default(true)
  configuration  Json?
  createdById    String
  organizationId String
  serviceId      String
  applicationId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  application    Application? @relation(fields: [applicationId], references: [id], onUpdate: NoAction)
  createdBy      User         @relation("UserEndpoints", fields: [createdById], references: [id], onDelete: Cascade)
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: NoAction)

  @@map("endpoints")
}

model ApiActivityLog {
  id             String   @id @default(cuid())
  method         String
  endpoint       String
  statusCode     Int
  responseTime   Int
  requestBody    Json?
  responseBody   Json?
  userAgent      String?
  ipAddress      String?
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("api_activity_logs")
}

model ApiUsage {
  id                String   @id @default(cuid())
  endpoint          String
  method            String
  callCount         Int      @default(1)
  totalResponseTime Int      @default(0)
  userId            String
  organizationId    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint, method])
  @@map("api_usage")
}

model Notification {
  id             String   @id @default(cuid())
  title          String
  message        String
  type           String
  isRead         Boolean  @default(false)
  data           Json?
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}

model UserLog {
  id             String   @id @default(cuid())
  action         String
  details        Json?
  ipAddress      String?
  userAgent      String?
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("user_logs")
}

model DatabaseObject {
  id             String   @id @default(cuid())
  name           String
  type           String
  schema         String?
  definition     String?
  metadata       Json?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("database_objects")
}

model SchemaIntelligence {
  id             String   @id @default(cuid())
  entityName     String
  entityType     String
  confidence     Float
  analysis       Json
  procedures     Json
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("schema_intelligence")
}

model GeneratedArtifact {
  id             String   @id @default(cuid())
  name           String
  type           String
  content        String
  metadata       Json?
  isActive       Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("generated_artifacts")
}

model RateLimitConfig {
  id             String   @id @default(cuid())
  identifier     String
  type           String
  limit          Int
  windowMs       Int
  isActive       Boolean  @default(true)
  organizationId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([identifier, type])
  @@map("rate_limit_configs")
}
