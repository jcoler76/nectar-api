/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require('./runtime/index-browser.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: '6.15.0',
  engine: '85179d7826409ee107a6ba334b5e305ae3fba9fb',
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  domain: 'domain',
  logo: 'logo',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastTermsPromptedAt: 'lastTermsPromptedAt',
  requiresTermsAcceptance: 'requiresTermsAcceptance',
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  emailVerified: 'emailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  lastLoginAt: 'lastLoginAt',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  phoneNumber: 'phoneNumber',
  phoneCarrier: 'phoneCarrier',
  isSuperAdmin: 'isSuperAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  userId: 'userId',
  organizationId: 'organizationId',
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  token: 'token',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt',
  organizationId: 'organizationId',
  invitedById: 'invitedById',
};

exports.Prisma.EmailVerificationTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
};

exports.Prisma.BillingEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  stripeEventId: 'stripeEventId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  organizationId: 'organizationId',
  subscriptionId: 'subscriptionId',
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  plan: 'plan',
  status: 'status',
  trialEndsAt: 'trialEndsAt',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  canceledAt: 'canceledAt',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  maxDatabaseConnections: 'maxDatabaseConnections',
  maxApiCallsPerMonth: 'maxApiCallsPerMonth',
  maxUsersPerOrg: 'maxUsersPerOrg',
  maxWorkflows: 'maxWorkflows',
  organizationId: 'organizationId',
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  stripeInvoiceId: 'stripeInvoiceId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  hostedInvoiceUrl: 'hostedInvoiceUrl',
  createdAt: 'createdAt',
  subscriptionId: 'subscriptionId',
};

exports.Prisma.DatabaseConnectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  host: 'host',
  port: 'port',
  database: 'database',
  username: 'username',
  passwordEncrypted: 'passwordEncrypted',
  sslEnabled: 'sslEnabled',
  isActive: 'isActive',
  lastTestedAt: 'lastTestedAt',
  lastTestResult: 'lastTestResult',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  createdBy: 'createdBy',
  databases: 'databases',
};

exports.Prisma.EndpointScalarFieldEnum = {
  id: 'id',
  path: 'path',
  method: 'method',
  name: 'name',
  description: 'description',
  query: 'query',
  queryParams: 'queryParams',
  bodySchema: 'bodySchema',
  responseSchema: 'responseSchema',
  apiKey: 'apiKey',
  isActive: 'isActive',
  rateLimitPerMinute: 'rateLimitPerMinute',
  requiresAuth: 'requiresAuth',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  createdBy: 'createdBy',
  connectionId: 'connectionId',
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  keyHash: 'keyHash',
  keyPrefix: 'keyPrefix',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  permissions: 'permissions',
  createdAt: 'createdAt',
  organizationId: 'organizationId',
  createdById: 'createdById',
};

exports.Prisma.UsageMetricScalarFieldEnum = {
  id: 'id',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  responseTimeMs: 'responseTimeMs',
  timestamp: 'timestamp',
  organizationId: 'organizationId',
  apiKeyId: 'apiKeyId',
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  definition: 'definition',
  isActive: 'isActive',
  trigger: 'trigger',
  lastRunAt: 'lastRunAt',
  runCount: 'runCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  createdBy: 'createdBy',
};

exports.Prisma.WorkflowExecutionScalarFieldEnum = {
  id: 'id',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  error: 'error',
  logs: 'logs',
  workflowId: 'workflowId',
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  url: 'url',
  events: 'events',
  secret: 'secret',
  isActive: 'isActive',
  lastTriggeredAt: 'lastTriggeredAt',
  failureCount: 'failureCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp',
  organizationId: 'organizationId',
  userId: 'userId',
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  label: 'label',
  description: 'description',
  host: 'host',
  port: 'port',
  database: 'database',
  username: 'username',
  passwordEncrypted: 'passwordEncrypted',
  isActive: 'isActive',
  failoverHost: 'failoverHost',
  objects: 'objects',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  createdBy: 'createdBy',
  connectionId: 'connectionId',
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  apiKeyHash: 'apiKeyHash',
  apiKeyEncrypted: 'apiKeyEncrypted',
  apiKeyPrefix: 'apiKeyPrefix',
  apiKeyHint: 'apiKeyHint',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  createdBy: 'createdBy',
  defaultRoleId: 'defaultRoleId',
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  serviceId: 'serviceId',
  createdBy: 'createdBy',
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  priority: 'priority',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  readAt: 'readAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  organizationId: 'organizationId',
  userId: 'userId',
};

exports.Prisma.ApiActivityLogScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  timestamp: 'timestamp',
  method: 'method',
  url: 'url',
  endpoint: 'endpoint',
  statusCode: 'statusCode',
  responseTime: 'responseTime',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  category: 'category',
  endpointType: 'endpointType',
  importance: 'importance',
  error: 'error',
  metadata: 'metadata',
  organizationId: 'organizationId',
  userId: 'userId',
  endpointId: 'endpointId',
};

exports.Prisma.DatabaseObjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  schema: 'schema',
  type: 'type',
  path: 'path',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  serviceId: 'serviceId',
};

exports.Prisma.ExposedEntityScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  connectionId: 'connectionId',
  organizationId: 'organizationId',
  database: 'database',
  schema: 'schema',
  name: 'name',
  type: 'type',
  primaryKey: 'primaryKey',
  allowRead: 'allowRead',
  allowCreate: 'allowCreate',
  allowUpdate: 'allowUpdate',
  allowDelete: 'allowDelete',
  defaultSort: 'defaultSort',
  softDeleteEnabled: 'softDeleteEnabled',
  softDeleteColumn: 'softDeleteColumn',
  softDeleteValue: 'softDeleteValue',
  pathSlug: 'pathSlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
};

exports.Prisma.ExposedFieldPolicyScalarFieldEnum = {
  id: 'id',
  exposedEntityId: 'exposedEntityId',
  roleId: 'roleId',
  includeFields: 'includeFields',
  excludeFields: 'excludeFields',
  writeProtected: 'writeProtected',
  maskedFields: 'maskedFields',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.ExposedRowPolicyScalarFieldEnum = {
  id: 'id',
  exposedEntityId: 'exposedEntityId',
  roleId: 'roleId',
  filterTemplate: 'filterTemplate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.TermsAndConditionsScalarFieldEnum = {
  id: 'id',
  version: 'version',
  content: 'content',
  summary: 'summary',
  effectiveDate: 'effectiveDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.TermsAcceptanceScalarFieldEnum = {
  id: 'id',
  acceptedAt: 'acceptedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  geolocation: 'geolocation',
  acceptanceMethod: 'acceptanceMethod',
  organizationId: 'organizationId',
  userId: 'userId',
  termsId: 'termsId',
};

exports.Prisma.RateLimitConfigScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  type: 'type',
  max: 'max',
  windowMs: 'windowMs',
  keyStrategy: 'keyStrategy',
  enabled: 'enabled',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  applicationLimits: 'applicationLimits',
  roleLimits: 'roleLimits',
  componentLimits: 'componentLimits',
  changeHistory: 'changeHistory',
  changeReason: 'changeReason',
  organizationId: 'organizationId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
};

exports.Prisma.RateLimitUsageScalarFieldEnum = {
  id: 'id',
  configName: 'configName',
  limitKey: 'limitKey',
  currentCount: 'currentCount',
  resetAt: 'resetAt',
  blocked: 'blocked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.MemberRole = exports.$Enums.MemberRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER',
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  STARTER: 'STARTER',
  PROFESSIONAL: 'PROFESSIONAL',
  BUSINESS: 'BUSINESS',
  ENTERPRISE: 'ENTERPRISE',
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIALING: 'TRIALING',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  UNPAID: 'UNPAID',
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED',
};

exports.DatabaseType = exports.$Enums.DatabaseType = {
  POSTGRESQL: 'POSTGRESQL',
  MYSQL: 'MYSQL',
  MARIADB: 'MARIADB',
  MSSQL: 'MSSQL',
  MONGODB: 'MONGODB',
  REDIS: 'REDIS',
  SUPABASE: 'SUPABASE',
  SNOWFLAKE: 'SNOWFLAKE',
  BIGQUERY: 'BIGQUERY',
  DYNAMODB: 'DYNAMODB',
};

exports.HttpMethod = exports.$Enums.HttpMethod = {
  GET: 'GET',
  POST: 'POST',
  PUT: 'PUT',
  PATCH: 'PATCH',
  DELETE: 'DELETE',
};

exports.ExecutionStatus = exports.$Enums.ExecutionStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED',
};

exports.NotificationType = exports.$Enums.NotificationType = {
  SYSTEM: 'SYSTEM',
  WORKFLOW: 'WORKFLOW',
  SECURITY: 'SECURITY',
  USER_MESSAGE: 'USER_MESSAGE',
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW',
};

exports.ExposedEntityType = exports.$Enums.ExposedEntityType = {
  TABLE: 'TABLE',
  VIEW: 'VIEW',
};

exports.AcceptanceMethod = exports.$Enums.AcceptanceMethod = {
  CLICK: 'CLICK',
  SCROLL: 'SCROLL',
  SIGNATURE: 'SIGNATURE',
};

exports.RateLimitType = exports.$Enums.RateLimitType = {
  API: 'API',
  AUTH: 'AUTH',
  UPLOAD: 'UPLOAD',
  GRAPHQL: 'GRAPHQL',
  WEBSOCKET: 'WEBSOCKET',
  CUSTOM: 'CUSTOM',
};

exports.RateLimitKeyStrategy = exports.$Enums.RateLimitKeyStrategy = {
  IP: 'IP',
  USER_ID: 'USER_ID',
  API_KEY: 'API_KEY',
  SESSION: 'SESSION',
  CUSTOM: 'CUSTOM',
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Membership: 'Membership',
  Invitation: 'Invitation',
  EmailVerificationToken: 'EmailVerificationToken',
  BillingEvent: 'BillingEvent',
  Subscription: 'Subscription',
  Invoice: 'Invoice',
  DatabaseConnection: 'DatabaseConnection',
  Endpoint: 'Endpoint',
  ApiKey: 'ApiKey',
  UsageMetric: 'UsageMetric',
  Workflow: 'Workflow',
  WorkflowExecution: 'WorkflowExecution',
  Webhook: 'Webhook',
  AuditLog: 'AuditLog',
  Service: 'Service',
  Application: 'Application',
  Role: 'Role',
  Notification: 'Notification',
  ApiActivityLog: 'ApiActivityLog',
  DatabaseObject: 'DatabaseObject',
  ExposedEntity: 'ExposedEntity',
  ExposedFieldPolicy: 'ExposedFieldPolicy',
  ExposedRowPolicy: 'ExposedRowPolicy',
  TermsAndConditions: 'TermsAndConditions',
  TermsAcceptance: 'TermsAcceptance',
  RateLimitConfig: 'RateLimitConfig',
  RateLimitUsage: 'RateLimitUsage',
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' +
            runtime.prettyName +
            '`).';
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
