version: '3.8'

services:
  nectar-api:
    image: ghcr.io/${GITHUB_REPOSITORY}:${VERSION:-latest}
    container_name: nectar-api
    restart: unless-stopped
    ports:
      - "${PORT:-3001}:3001"
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - PORT=3001
    volumes:
      # Persistent data volumes
      - ./server/logs:/app/server/logs
      - ./server/backups:/app/server/backups
      - ./server/uploads:/app/server/uploads
    networks:
      - nectar-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # MongoDB (optional - remove if using external MongoDB)
  mongodb:
    image: mongo:7.0
    container_name: nectar-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=nectar
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - nectar-network

  # PostgreSQL 17 for core business data (multi-tenant)
  postgres:
    image: postgres:17-alpine
    container_name: nectar-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-nectar_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-nectar_dev_2024!}
      - POSTGRES_DB=${POSTGRES_DB:-nectar_core}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - nectar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nectar_admin} -d ${POSTGRES_DB:-nectar_core}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Bull.js queues and caching
  redis:
    image: redis:7-alpine
    container_name: nectar-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-nectar_redis_2024!}
    volumes:
      - redis_data:/data
    networks:
      - nectar-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-nectar_redis_2024!}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for PostgreSQL management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nectar-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@nectar-api.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-pgadmin_2024!}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - nectar-network
    depends_on:
      - postgres
    profiles:
      - development

networks:
  nectar-network:
    driver: bridge

volumes:
  mongodb_data:
  mongodb_config:
  postgres_data:
  redis_data:
  pgadmin_data: