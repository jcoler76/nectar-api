// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Platform Admin Users (separate from customer users)
model PlatformAdmin {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  role              AdminRole @default(ADMIN)
  isActive          Boolean   @default(true) @map("is_active")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  // Relations
  auditLogs         AdminAuditLog[]
  sessions          AdminSession[]
  
  @@map("platform_admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  VIEWER
  SUPPORT
}

// Admin Audit Logging
model AdminAuditLog {
  id            String           @id @default(uuid())
  adminId       String           @map("admin_id")
  action        String          // login, view_user, impersonate, config_change, etc.
  resource      String?         // user_id, organization_id, etc.
  resourceType  String?         @map("resource_type") // 'user', 'organization', 'system'
  details       Json?           // Additional context
  ipAddress     String          @map("ip_address")
  userAgent     String?         @map("user_agent")
  timestamp     DateTime        @default(now())
  
  // Relations
  admin         PlatformAdmin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("admin_audit_logs")
  @@index([adminId])
  @@index([timestamp])
  @@index([action])
}

// System Configuration
model SystemConfig {
  id            String          @id @default(uuid())
  key           String          @unique
  value         Json
  description   String?
  updatedBy     String?         @map("updated_by")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  createdAt     DateTime        @default(now()) @map("created_at")
  
  @@map("system_config")
}

// Platform Announcements
model PlatformAnnouncement {
  id            String          @id @default(uuid())
  title         String
  message       String
  type          AnnouncementType @default(INFO)
  targetAudience String         @map("target_audience") // 'all', 'customers', 'specific_orgs'
  targetOrgs    String[]        @map("target_orgs") // Array of organization IDs
  isActive      Boolean         @default(true) @map("is_active")
  scheduledFor  DateTime?       @map("scheduled_for")
  expiresAt     DateTime?       @map("expires_at")
  createdBy     String          @map("created_by")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  
  @@map("platform_announcements")
  @@index([isActive])
  @@index([scheduledFor])
}

enum AnnouncementType {
  INFO
  WARNING
  MAINTENANCE
  FEATURE
  CRITICAL
}

// Admin Sessions for tracking active sessions
model AdminSession {
  id            String          @id @default(uuid())
  adminId       String          @map("admin_id")
  token         String          @unique
  expiresAt     DateTime        @map("expires_at")
  ipAddress     String?         @map("ip_address")
  userAgent     String?         @map("user_agent")
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  
  // Relations
  admin         PlatformAdmin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@map("admin_sessions")
  @@index([adminId])
  @@index([expiresAt])
  @@index([token])
}

