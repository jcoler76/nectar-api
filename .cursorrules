# Cursor AI Rules for Template20 Schema Intelligence
# Enhanced context and intelligent code suggestions for business logic development

## Project Context
You are working on the Nectar API platform with Template20 database schema intelligence. This system provides AI-powered schema discovery, Prisma generation, and GraphQL integration for business applications.

## Key Architecture Components
- **MongoDB Intelligence**: Central store of Template20 database schema and business logic
- **Prisma Schema Generation**: Type-safe database access with business entity organization  
- **GraphQL Schema Generation**: AI-optimized schemas with procedure recommendations
- **MCP (Model Context Protocol)**: Business intelligence tools and procedure discovery
- **AI Documentation**: OpenAI-powered stored procedure documentation

## Business Entities and Core Tables
### Customer Entity
- Primary Table: `gsCustomers`
- Related Tables: `tblContact`
- Key Procedures: `uspContactGet`, `uspContactByCriteriaGet`, `uspContactSave`
- Business Focus: Customer relationship management, contact tracking

### Invoice Entity  
- Primary Table: `tblInvoice`
- Related Tables: `tblInvoiceDetail`
- Key Procedures: `uspInvoiceGet`, `uspInvoicePaymentGet`, `uspInvoiceSave`
- Business Focus: Billing, accounts receivable, payment tracking

### Contract Entity
- Primary Table: `gsContracts` 
- Related Tables: `tblSalesOpportunity`
- Key Procedures: `uspContractGet`, `uspReportSalesByCriteriaGet`
- Business Focus: Sales contracts, opportunity management

### Opportunity Entity
- Primary Table: `tblSalesOpportunity`
- Key Procedures: `uspOpportunityGet`, `uspOpportunityActivityGet`
- Business Focus: Sales pipeline, opportunity tracking

### Payment Entity
- Primary Table: `tblPayment`
- Key Procedures: `uspPaymentGet`, `uspPaymentSave`
- Business Focus: Payment processing, transaction management

## Development Patterns

### Database Operations
ALWAYS use Template20 intelligence for database operations:

```javascript
// ✅ CORRECT: Use intelligence-driven procedure discovery
const Template20Intelligence = require('./models/Template20Intelligence');
const intelligence = await Template20Intelligence.getLatestIntelligence();
const procedures = intelligence.getProceduresForEntity('customer', 0.8);

// ✅ CORRECT: Use high-confidence procedures
const bestProcedure = procedures[0]; // Sorted by confidence
const result = await dbService.executeProcedure(bestProcedure.procedureName, params);

// ❌ INCORRECT: Hardcoding procedure names
const result = await dbService.executeProcedure('mc_ContactsGet', params); // mc_ procedures don't exist
```

### Prisma Integration
Use generated Prisma schemas for type safety:

```typescript
// ✅ CORRECT: Use generated Prisma client
import { PrismaClient } from './prisma/generated/client';
const prisma = new PrismaClient();

// ✅ CORRECT: Use business entity models
const customers = await prisma.gsCustomers.findMany({
  include: {
    invoices: true,
    contracts: true
  }
});

// ✅ CORRECT: Use Prisma with intelligence recommendations
const customerProcs = await intelligence.getProceduresForEntity('customer');
// Use Prisma for reads, procedures for complex business logic
```

### GraphQL Development
Leverage generated GraphQL schemas:

```graphql
# ✅ CORRECT: Use generated types with business context
query GetCustomerWithIntelligence($id: ID!) {
  customer(id: $id) {
    id
    name
    # AI-generated relationship fields
    invoices {
      id
      amount
      status
    }
    # Procedure recommendations
    _procedures {
      name
      confidence
      type
      parameters {
        parameterName
        dataType
      }
    }
  }
}
```

### API Integration
Use intelligence APIs for dynamic discovery:

```javascript
// ✅ CORRECT: Dynamic entity discovery
const entityResponse = await fetch('/api/template20-sync/entities');
const entities = await entityResponse.json();

// ✅ CORRECT: Get procedures by entity with confidence filtering
const procedureResponse = await fetch('/api/template20-sync/procedures/customer?minConfidence=0.8');
const procedures = await procedureResponse.json();
```

## Code Generation Guidelines

### When suggesting database queries:
1. FIRST check Template20 intelligence for recommended procedures
2. Use business entity context (customer, invoice, contract, etc.)
3. Prefer high-confidence procedures (>0.8) for production code
4. Include business context in comments

### When generating GraphQL resolvers:
1. Use procedure recommendation resolvers for dynamic discovery
2. Include confidence scores and business entity metadata
3. Leverage relationship intelligence from view analysis
4. Add AI-friendly field descriptions

### When creating Prisma operations:
1. Use generated business entity models
2. Include relationship fields from intelligence
3. Add business context comments
4. Consider procedure integration for complex operations

## File Structure Understanding
```
server/
├── models/Template20Intelligence.js     # MongoDB schema intelligence model
├── services/
│   ├── Template20SyncService.js         # MongoDB sync without DB strain  
│   ├── PrismaSchemaGenerator.js         # AI-optimized Prisma generation
│   ├── GraphQLSchemaGenerator.js        # GraphQL with procedure integration
│   └── AIDocumentationService.js        # OpenAI-powered docs
├── prisma/
│   ├── schema.prisma                    # Main generated schema
│   └── generated/                       # Entity-specific schemas
├── graphql/generated/                   # Generated GraphQL schemas
├── docs/generated/                      # AI-generated procedure docs
└── routes/
    ├── template20Sync.js                # Intelligence sync API
    └── aiSchemaGeneration.js            # Schema generation API
```

## Business Logic Priorities
1. **Customer Management**: Highest priority, most mature procedures
2. **Invoice/Billing**: High priority, financial accuracy critical  
3. **Contract/Sales**: High priority, revenue impact
4. **Opportunity Pipeline**: Medium priority, sales enablement
5. **Production/Operations**: Medium priority, workflow optimization

## Performance Considerations
- Use MongoDB intelligence caching to avoid Template20 database strain
- Batch AI documentation generation to manage OpenAI API costs
- Prefer high-confidence procedures (>0.8) for better performance
- Use view relationship intelligence for optimized JOINs

## Error Handling
- Always check procedure confidence before execution
- Provide fallbacks when intelligence is unavailable
- Log business entity context for debugging
- Use graceful degradation when AI services fail

## AI Assistant Optimization
When generating code:
1. Include business entity type in variable names
2. Add confidence scores and procedure metadata in comments
3. Use intelligence APIs for dynamic discovery
4. Provide relationship context from view analysis
5. Include usage examples from generated documentation

This system is designed to provide comprehensive business context to AI coding assistants, enabling intelligent code generation that properly integrates with existing business logic and database structures.